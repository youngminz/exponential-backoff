{"version":3,"sources":["components/Input.jsx","components/Result.jsx","App.jsx","index.jsx"],"names":["Input","label","value","type","placeholder","onChange","addons","maxLength","minLength","useState","active","setActive","inputRef","useRef","handleChange","e","Function","className","onClick","current","focus","ref","onFocus","onBlur","Result","calculationResult","header","body","map","retryCount","backoffSeconds","accumulateBackoffSeconds","key","toFixed","App","minRetryBackoffSeconds","setMinRetryBackoffSeconds","maxRetryBackoffSeconds","setMaxRetryBackoffSeconds","totalRetryCount","setTotalRetryCount","isNaN","parseFloat","parseInt","minRetryBackoff","maxRetryBackoff","result","Math","min","push","calculateExponentialBackoff","target","ReactDOM","render","document","getElementById"],"mappings":"iTAsDeA,G,MAlDD,SAAC,GASR,IARLC,EAQI,EARJA,MACAC,EAOI,EAPJA,MAOI,IANJC,YAMI,MANG,OAMH,EALJC,EAKI,EALJA,YACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,OACAC,EAEI,EAFJA,UACAC,EACI,EADJA,UACI,EACwBC,oBAAS,GADjC,mBACGC,EADH,KACWC,EADX,KAKEC,EAAWC,mBAMXC,EAAe,SAAAC,GACfV,GAAYA,aAAoBW,UAClCX,EAASU,IAIb,OACE,yBACEE,UAAS,gBAAWP,EAAS,SAAW,IACxCQ,QAAS,kBAbXP,GAAU,QACVC,EAASO,QAAQC,UAcdnB,GAAS,+BAAQA,GAClB,yBAAKgB,UAAU,iBACb,2BACEI,IAAKT,EACLT,KAAMA,EACND,MAAOA,EACPE,YAAaA,EACbG,UAAWA,EACXC,UAAWA,EACXH,SAAU,SAAAU,GAAC,OAAID,EAAaC,IAC5BO,QAAS,kBAAMX,GAAU,IACzBY,OAAQ,kBAAMZ,GAAU,MAEzBL,GAAU,yBAAKW,UAAU,UAAUX,OChB7BkB,G,MA5BA,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,kBACVC,EACJ,4BACE,uCACA,+CACA,oDAGEC,EAAOF,EAAkBG,KAC7B,YAA+D,IAA5DC,EAA2D,EAA3DA,WAAYC,EAA+C,EAA/CA,eAAgBC,EAA+B,EAA/BA,yBAC7B,OACE,wBAAIC,IAAKH,GACP,4BAAKA,GACL,4BAAKC,EAAeG,QAAQ,GAA5B,QACA,4BAAKF,EAAyBE,QAAQ,GAAtC,YAMR,OACE,2BAAOhB,UAAU,UACf,+BAAQS,GACR,+BAAQC,MC2DCO,G,MAvDH,WAAO,IAAD,EAC4CzB,mBAAS,IADrD,mBACT0B,EADS,KACeC,EADf,OAE4C3B,mBAAS,IAFrD,mBAET4B,EAFS,KAEeC,EAFf,OAG8B7B,mBAAS,IAHvC,mBAGT8B,EAHS,KAGQC,EAHR,KAKZf,EAAoB,KAgBxB,OATEA,EAJAgB,MAAMC,WAAWP,KACjBM,MAAMC,WAAWL,KACjBI,MAAME,SAASJ,IAEK,GArCY,SAClCK,EACAC,EACAN,GAKA,IAHA,IAAIO,EAAS,GACTf,EAA2B,EAEtBF,EAAa,EAAGA,GAAcU,EAAiBV,IAAc,CACpE,IAAMC,EAAiBiB,KAAKC,IAC1BJ,EAAe,SAAG,EAAMf,EAAa,GACrCgB,GAEFd,GAA4BD,EAE5BgB,EAAOG,KAAK,CACVpB,aACAC,iBACAC,6BAIJ,OAAOe,EAiBeI,CAClBR,WAAWP,GACXO,WAAWL,GACXM,SAASJ,IAKX,0BAAMtB,UAAU,OACd,uEAEA,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CACEd,KAAK,SACLF,MAAM,oBACNC,MAAOiC,EACP9B,SAAU,SAAAU,GAAC,OAAIqB,EAA0BrB,EAAEoC,OAAOjD,QAClDI,OAAO,QAET,kBAAC,EAAD,CACEH,KAAK,SACLF,MAAM,oBACNC,MAAOmC,EACPhC,SAAU,SAAAU,GAAC,OAAIuB,EAA0BvB,EAAEoC,OAAOjD,QAClDI,OAAO,QAET,kBAAC,EAAD,CACEH,KAAK,SACLF,MAAM,oBACNC,MAAOqC,EACPlC,SAAU,SAAAU,GAAC,OAAIyB,EAAmBzB,EAAEoC,OAAOjD,QAC3CK,UAAU,IACVD,OAAO,WAIX,kBAAC,EAAD,CAAQmB,kBAAmBA,OC3EjC2B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f01afc64.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\r\n\r\nimport \"./Input.scss\";\r\n\r\nconst Input = ({\r\n  label,\r\n  value,\r\n  type = \"text\",\r\n  placeholder,\r\n  onChange,\r\n  addons,\r\n  maxLength,\r\n  minLength\r\n}) => {\r\n  const [active, setActive] = useState(false);\r\n  /**\r\n   * wrapper div를 클릭해도 input으로 포커스 되는기능 구현\r\n   */\r\n  const inputRef = useRef();\r\n  const handleWrapperClick = () => {\r\n    setActive(true);\r\n    inputRef.current.focus();\r\n  };\r\n\r\n  const handleChange = e => {\r\n    if (onChange && onChange instanceof Function) {\r\n      onChange(e);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={`Input ${active ? \"active\" : \"\"}`}\r\n      onClick={() => handleWrapperClick()}\r\n    >\r\n      {label && <label>{label}</label>}\r\n      <div className=\"inner-wrapper\">\r\n        <input\r\n          ref={inputRef}\r\n          type={type}\r\n          value={value}\r\n          placeholder={placeholder}\r\n          maxLength={maxLength}\r\n          minLength={minLength}\r\n          onChange={e => handleChange(e)}\r\n          onFocus={() => setActive(true)}\r\n          onBlur={() => setActive(false)}\r\n        />\r\n        {addons && <div className=\"addons\">{addons}</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\n\r\nimport \"./Result.scss\";\r\n\r\nconst Result = ({ calculationResult }) => {\r\n  const header = (\r\n    <tr>\r\n      <th>retry #</th>\r\n      <th>current backoff</th>\r\n      <th>accumulated backoff</th>\r\n    </tr>\r\n  );\r\n  const body = calculationResult.map(\r\n    ({ retryCount, backoffSeconds, accumulateBackoffSeconds }) => {\r\n      return (\r\n        <tr key={retryCount}>\r\n          <td>{retryCount}</td>\r\n          <td>{backoffSeconds.toFixed(2)} sec</td>\r\n          <td>{accumulateBackoffSeconds.toFixed(2)} sec</td>\r\n        </tr>\r\n      );\r\n    }\r\n  );\r\n\r\n  return (\r\n    <table className=\"Result\">\r\n      <thead>{header}</thead>\r\n      <tbody>{body}</tbody>\r\n    </table>\r\n  );\r\n};\r\n\r\nexport default Result;\r\n","import React, { useState } from \"react\";\r\nimport Input from \"./components/Input\";\r\nimport Result from \"./components/Result\";\r\n\r\nimport \"./App.scss\";\r\n\r\nconst calculateExponentialBackoff = (\r\n  minRetryBackoff,\r\n  maxRetryBackoff,\r\n  totalRetryCount\r\n) => {\r\n  let result = [];\r\n  let accumulateBackoffSeconds = 0.0;\r\n\r\n  for (let retryCount = 1; retryCount <= totalRetryCount; retryCount++) {\r\n    const backoffSeconds = Math.min(\r\n      minRetryBackoff * 2 ** (retryCount - 1),\r\n      maxRetryBackoff\r\n    );\r\n    accumulateBackoffSeconds += backoffSeconds;\r\n\r\n    result.push({\r\n      retryCount,\r\n      backoffSeconds,\r\n      accumulateBackoffSeconds\r\n    });\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst App = () => {\r\n  const [minRetryBackoffSeconds, setMinRetryBackoffSeconds] = useState(0.1);\r\n  const [maxRetryBackoffSeconds, setMaxRetryBackoffSeconds] = useState(60.0);\r\n  const [totalRetryCount, setTotalRetryCount] = useState(15);\r\n\r\n  let calculationResult = null;\r\n\r\n  if (\r\n    isNaN(parseFloat(minRetryBackoffSeconds)) ||\r\n    isNaN(parseFloat(maxRetryBackoffSeconds)) ||\r\n    isNaN(parseInt(totalRetryCount))\r\n  ) {\r\n    calculationResult = [];\r\n  } else {\r\n    calculationResult = calculateExponentialBackoff(\r\n      parseFloat(minRetryBackoffSeconds),\r\n      parseFloat(maxRetryBackoffSeconds),\r\n      parseInt(totalRetryCount)\r\n    );\r\n  }\r\n\r\n  return (\r\n    <main className=\"app\">\r\n      <h1>truncated exponential backoff simulator</h1>\r\n\r\n      <div className=\"form-wrapper\">\r\n        <Input\r\n          type=\"number\"\r\n          label=\"min retry backoff\"\r\n          value={minRetryBackoffSeconds}\r\n          onChange={e => setMinRetryBackoffSeconds(e.target.value)}\r\n          addons=\"sec\"\r\n        />\r\n        <Input\r\n          type=\"number\"\r\n          label=\"max retry backoff\"\r\n          value={maxRetryBackoffSeconds}\r\n          onChange={e => setMaxRetryBackoffSeconds(e.target.value)}\r\n          addons=\"sec\"\r\n        />\r\n        <Input\r\n          type=\"number\"\r\n          label=\"total retry count\"\r\n          value={totalRetryCount}\r\n          onChange={e => setTotalRetryCount(e.target.value)}\r\n          maxLength=\"3\"\r\n          addons=\"retry\"\r\n        />\r\n      </div>\r\n\r\n      <Result calculationResult={calculationResult} />\r\n    </main>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"normalize-css\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}