{"version":3,"sources":["components/Input.jsx","components/Result.jsx","App.jsx","index.jsx"],"names":["Input","label","value","type","placeholder","onChange","addons","maxLength","minLength","useState","active","setActive","inputRef","useRef","handleChange","e","Function","className","onClick","current","focus","ref","onFocus","onBlur","formatTime","seconds","parseInt","toFixed","Result","calculationResult","header","body","map","retryCount","backoffSeconds","accumulateBackoffSeconds","key","getQueryStringValue","url","URL","window","location","URLSearchParams","search","get","App","minRetryBackoffSeconds","setMinRetryBackoffSeconds","maxRetryBackoffSeconds","setMaxRetryBackoffSeconds","totalRetryCount","setTotalRetryCount","isNaN","parseFloat","minRetryBackoff","maxRetryBackoff","result","Math","min","push","calculateExponentialBackoff","history","replaceState","newUrl","origin","path","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84f127ae.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nimport \"./Input.scss\";\n\nconst Input = ({\n  label,\n  value,\n  type = \"text\",\n  placeholder,\n  onChange,\n  addons,\n  maxLength,\n  minLength\n}) => {\n  const [active, setActive] = useState(false);\n  /**\n   * wrapper div를 클릭해도 input으로 포커스 되는기능 구현\n   */\n  const inputRef = useRef();\n  const handleWrapperClick = () => {\n    setActive(true);\n    inputRef.current.focus();\n  };\n\n  const handleChange = e => {\n    if (onChange && onChange instanceof Function) {\n      onChange(e);\n    }\n  };\n\n  return (\n    <div\n      className={`Input ${active ? \"active\" : \"\"}`}\n      onClick={() => handleWrapperClick()}\n    >\n      {label && <label>{label}</label>}\n      <div className=\"inner-wrapper\">\n        <input\n          ref={inputRef}\n          type={type}\n          value={value}\n          placeholder={placeholder}\n          maxLength={maxLength}\n          minLength={minLength}\n          onChange={e => handleChange(e)}\n          onFocus={() => setActive(true)}\n          onBlur={() => setActive(false)}\n        />\n        {addons && <div className=\"addons\">{addons}</div>}\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n","import React from \"react\";\n\nimport \"./Result.scss\";\n\nconst formatTime = seconds => {\n  if (seconds >= 60) {\n    return `${parseInt(seconds / 60)} min ${parseInt(seconds % 60)} sec`;\n  } else if (seconds >= 10) {\n    return `${parseInt(seconds % 60)} sec`;\n  }\n  return `${(seconds % 60).toFixed(2)} sec`;\n};\n\nconst Result = ({ calculationResult }) => {\n  const header = (\n    <tr>\n      <th>retry #</th>\n      <th>current backoff</th>\n      <th>accumulated backoff</th>\n    </tr>\n  );\n  const body = calculationResult.map(\n    ({ retryCount, backoffSeconds, accumulateBackoffSeconds }) => {\n      return (\n        <tr key={retryCount}>\n          <td>{retryCount}</td>\n          <td>{formatTime(backoffSeconds)}</td>\n          <td>{formatTime(accumulateBackoffSeconds)}</td>\n        </tr>\n      );\n    }\n  );\n\n  return (\n    <table className=\"Result\">\n      <thead>{header}</thead>\n      <tbody>{body}</tbody>\n    </table>\n  );\n};\n\nexport default Result;\n","import React, { useState } from \"react\";\nimport Input from \"./components/Input\";\nimport Result from \"./components/Result\";\n\nimport \"./App.scss\";\n\nconst calculateExponentialBackoff = (\n  minRetryBackoff,\n  maxRetryBackoff,\n  totalRetryCount\n) => {\n  let result = [];\n  let accumulateBackoffSeconds = 0.0;\n\n  for (let retryCount = 1; retryCount <= totalRetryCount; retryCount++) {\n    const backoffSeconds = Math.min(\n      minRetryBackoff * 2 ** (retryCount - 1),\n      maxRetryBackoff\n    );\n    accumulateBackoffSeconds += backoffSeconds;\n\n    result.push({\n      retryCount,\n      backoffSeconds,\n      accumulateBackoffSeconds\n    });\n  }\n\n  return result;\n};\n\nconst getQueryStringValue = key => {\n  const url = new URL(window.location);\n  const params = new URLSearchParams(url.search);\n  return params.get(key);\n};\n\nconst App = () => {\n  const [minRetryBackoffSeconds, setMinRetryBackoffSeconds] = useState(\n    getQueryStringValue(\"min\") || 0.1\n  );\n  const [maxRetryBackoffSeconds, setMaxRetryBackoffSeconds] = useState(\n    getQueryStringValue(\"max\") || 60.0\n  );\n  const [totalRetryCount, setTotalRetryCount] = useState(\n    getQueryStringValue(\"retry\") || 15\n  );\n\n  let calculationResult = null;\n\n  if (\n    isNaN(parseFloat(minRetryBackoffSeconds)) ||\n    isNaN(parseFloat(maxRetryBackoffSeconds)) ||\n    isNaN(parseInt(totalRetryCount))\n  ) {\n    calculationResult = [];\n  } else {\n    calculationResult = calculateExponentialBackoff(\n      parseFloat(minRetryBackoffSeconds),\n      parseFloat(maxRetryBackoffSeconds),\n      parseInt(totalRetryCount)\n    );\n\n    if (window.history.replaceState) {\n      const newUrl =\n        new URL(window.location).origin +\n        `?min=${minRetryBackoffSeconds}&max=${maxRetryBackoffSeconds}&retry=${totalRetryCount}`;\n\n      window.history.replaceState({ path: newUrl }, \"\", newUrl);\n    }\n  }\n\n  return (\n    <main className=\"app\">\n      <h1>truncated exponential backoff simulator</h1>\n\n      <div className=\"form-wrapper\">\n        <Input\n          type=\"number\"\n          label=\"min retry backoff\"\n          value={minRetryBackoffSeconds}\n          onChange={e => setMinRetryBackoffSeconds(e.target.value)}\n          addons=\"sec\"\n        />\n        <Input\n          type=\"number\"\n          label=\"max retry backoff\"\n          value={maxRetryBackoffSeconds}\n          onChange={e => setMaxRetryBackoffSeconds(e.target.value)}\n          addons=\"sec\"\n        />\n        <Input\n          type=\"number\"\n          label=\"total retry count\"\n          value={totalRetryCount}\n          onChange={e => setTotalRetryCount(e.target.value)}\n          maxLength=\"3\"\n          addons=\"retry\"\n        />\n      </div>\n\n      <Result calculationResult={calculationResult} />\n    </main>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"normalize-css\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}